{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\n\nfunction useFetch(url) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  let controller = useMemo(() => new AbortController());\n  const fetchData = useCallback(async () => {\n    return fetch(url, {\n      signal: controller.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch the data!\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIsLoading(false);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"fetch aborting\");\n      } else {\n        setIsLoading(false);\n      }\n    });\n  }, [url]);\n\n  const deleteTodo = id => {\n    fetch(\"http://localhost:8000/todos/\" + id, {\n      method: \"DELETE\"\n    }).then(() => {\n      fetchData();\n    });\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetchData();\n    }, 1000);\n    return () => controller.abort();\n  }, [url, fetchData, controller]);\n  return {\n    data,\n    deleteTodo,\n    isLoading\n  };\n}\n\n_s(useFetch, \"hUyzafhqp8j2Ax1HwqClUSRgUPo=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/alexisloricourt/Desktop/react-projects/router-react-project/src/useFetch.js"],"names":["useState","useEffect","useCallback","useFetch","url","data","setData","isLoading","setIsLoading","controller","useMemo","AbortController","fetchData","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","deleteTodo","id","method","setTimeout","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AAEA,MAAIS,UAAU,GAAGC,OAAO,CAAC,MAAM,IAAIC,eAAJ,EAAP,CAAxB;AAEA,QAAMC,SAAS,GAAGV,WAAW,CAAC,YAAY;AACxC,WAAOW,KAAK,CAACT,GAAD,EAAM;AAAEU,MAAAA,MAAM,EAAEL,UAAU,CAACK;AAArB,KAAN,CAAL,CACJC,IADI,CACEC,GAAD,IAAS;AACb,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,cAAMC,KAAK,CAAC,2BAAD,CAAX;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KANI,EAOJJ,IAPI,CAOEV,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAVI,EAWJY,KAXI,CAWGC,GAAD,IAAS;AACd,UAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,OAFD,MAEO;AACLhB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAjBI,CAAP;AAkBD,GAnB4B,EAmB1B,CAACJ,GAAD,CAnB0B,CAA7B;;AAqBA,QAAMqB,UAAU,GAAIC,EAAD,IAAQ;AACzBb,IAAAA,KAAK,CAAC,iCAAiCa,EAAlC,EAAsC;AACzCC,MAAAA,MAAM,EAAE;AADiC,KAAtC,CAAL,CAEGZ,IAFH,CAEQ,MAAM;AACZH,MAAAA,SAAS;AACV,KAJD;AAKD,GAND;;AAQAX,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,UAAU,CAAC,MAAM;AACfhB,MAAAA,SAAS;AACV,KAFS,EAEP,IAFO,CAAV;AAIA,WAAO,MAAMH,UAAU,CAACoB,KAAX,EAAb;AACD,GANQ,EAMN,CAACzB,GAAD,EAAMQ,SAAN,EAAiBH,UAAjB,CANM,CAAT;AAQA,SAAO;AAAEJ,IAAAA,IAAF;AAAQoB,IAAAA,UAAR;AAAoBlB,IAAAA;AAApB,GAAP;AACD;;GA5CQJ,Q;;AA8CT,eAAeA,QAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  let controller = useMemo(() => new AbortController());\n\n  const fetchData = useCallback(async () => {\n    return fetch(url, { signal: controller.signal })\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"Could not fetch the data!\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setData(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        if (err.name === \"AbortError\") {\n          console.log(\"fetch aborting\");\n        } else {\n          setIsLoading(false);\n        }\n      });\n  }, [url]);\n\n  const deleteTodo = (id) => {\n    fetch(\"http://localhost:8000/todos/\" + id, {\n      method: \"DELETE\",\n    }).then(() => {\n      fetchData();\n    });\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetchData();\n    }, 1000);\n\n    return () => controller.abort();\n  }, [url, fetchData, controller]);\n\n  return { data, deleteTodo, isLoading };\n}\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}